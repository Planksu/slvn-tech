name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: project-files
  UNITTEST_SOLUTION_FILE_PATH: slvn-tech-unittest

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Debug

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
      
    - name: Setup premake
    # You may pin to the exact commit or the version.
    # uses: abel0b/setup-premake@8c96e76d62db4c5cbe7c16d7e5b80183534374c7
      uses: abel0b/setup-premake@v1
      
    - name: Run premake
      run: premake5.exe vs2019

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Platform=x64 /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      
    - name: Build Unittest Solution
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.UNITTEST_SOLUTION_FILE_PATH}}
      
    - name: Setup VSTest.console.exe
      # You may pin to the exact commit or the version.
      # uses: darenm/Setup-VSTest@fbb574e849d6225ce9702f86e64eb6cdc4b4e561
      uses: darenm/Setup-VSTest@v1.1.1
      
    - name: Run unittest
      run: vstest.console.exe /Platform:x64 ${{env.UNITTEST_SOLUTION_FILE_PATH}}\x64\Debug\slvn-tech-unittest.dll
